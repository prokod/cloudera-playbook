- setup:

# - name: Ensure Parcel Repo directory is present
#   ansible.builtin.file:
#     path: /opt/cloudera/parcel-repo
#     state: directory

- uri:
    url: "{{ __parcel_repository_item }}"
    return_content: yes
  register: parcel_repositories
  loop: "{{ scm_parcel_repositories }}"
  loop_control:
    loop_var: __parcel_repository_item

- set_fact: pattern="{{ '.*(' ~ parcel_distro ~ '\.?(sha|sha1|sha256)?|manifest.json)' }}"
- debug: var=pattern
- debug: var=the_zips
  vars:
    the_zips: >-
     {{ parcel_repositories.results | map(attribute='content') | map('regex_findall', pattern | string ) | list }}

# Cloudera Manager expects file hashes to be .sha extension
# - name: Request Async Download of Parcels to Cloudera Manager Parcel Repo
#   when: preload_parcels
#   register: __infra_download_parcels_results
#   loop: "{{ preload_parcels | select('match', '.*parcel.*') | list }}"
#   loop_control:
#     loop_var: __parcel_download_item
#   async: 3600
#   poll: 0
#   ansible.builtin.get_url:
#     url: "{{ __parcel_download_item }}"
#     dest: "/opt/cloudera/parcel-repo/{{ __parcel_download_item | urlsplit('path') | basename | replace('.sha1', '.sha') }}"

# - name: Track async downloads to completion  [ This may take a while if your files are very large or far away ]
#   when : preload_parcels
#   loop: "{{ __infra_download_parcels_results.results }}"
#   loop_control:
#     loop_var: __download_async_item
#   register: __async_download_results
#   until: __async_download_results.finished is defined and __async_download_results.finished
#   delay: 15
#   retries: 300
#   async_status:
#     jid: "{{ __download_async_item.ansible_job_id }}"
#   failed_when:
#     - __download_async_item.failed == True
#     - __download_async_item.finished != 1