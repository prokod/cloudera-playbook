- setup:

# - name: Ensure Parcel Repo directory is present
#   ansible.builtin.file:
#     path: /opt/cloudera/parcel-repo
#     state: directory

- name: Get Parcel repositories content
  uri:
    url: "{{ __parcel_repository_item }}"
    return_content: yes
  register: parcel_repositories
  loop: "{{ scm_parcel_repositories }}"
  loop_control:
    loop_var: __parcel_repository_item

- name: Regex pattern for filtering parcel distro repo manifest (case 1)
  set_fact: pattern1="{{ '(?:.*?cdh' ~ cluster_version_cdh_version ~ '.*?\n)+(?:.*?\n)*.*?href\=\"(manifest.json)\"' }}"

- name: Regex pattern for filtering parcel distro repo manifest (case 2)
  set_fact: pattern2="{{ '(?:.*?\n)*.*?href\=\"(manifest.json)\".*?\n(?:.*?\n)*(?:.*?cdh' ~ cluster_version_cdh_version ~ '.*?\n)+' }}"

- name: Regex pattern for filtering parcel distro parcels
  set_fact: pattern3="{{ 'href\=\"((?:.*?cdh' ~ cluster_version_cdh_version ~ '.*?' ~ parcel_distro ~ ')\.?(?:sha|sha1|sha256)?)\"' }}"

- name: Extract repo keys (url as key)
  set_fact: parcel_repos_keys="{{ parcel_repositories.results | map(attribute='url') | list }}"

- name: Compose repos files dictionary
  set_fact:
    parcel_repos_files: >-
       {{ (dict(parcel_repos_keys | zip(parcel_repositories.results | map(attribute='content') | map('regex_findall', pattern1 | string ) | list))
         | combine(dict(parcel_repos_keys | zip(parcel_repositories.results | map(attribute='content') | map('regex_findall', pattern2 | string ) | list)), list_merge='append_rp'))
         | combine(dict(parcel_repos_keys | zip(parcel_repositories.results | map(attribute='content') | map('regex_findall', pattern3 | string ) | list)), list_merge='append_rp') 
         | dict2items(key_name='name', value_name='files') }}

# Cloudera Manager expects file hashes to be .sha extension
# example of item.0.name: "https://archive.cloudera.com/p/cdh6/6.3.2-patch4071/parcels/"
- name: Request Async Download of Parcels to tarball/s staging dir/s
  register: __download_parcels_results
  loop: "{{ parcel_repos_files | subelements('files') }}"
  loop_control:
    loop_var: __parcel_download_item
  async: 3600
  poll: 0
  ansible.builtin.get_url:
    url: "{{ __parcel_download_item.0.name }}{{ __parcel_download_item.1 }}"
    dest: "{{ local_temp_dir }}/{{ repo_tar_stage_local_dir }}/{{  __parcel_download_item.0.name | regex_replace('.*\/(.*?)\/([0-9\.]+).*', '\1-\2-parcels') }}"

- name: Track async downloads to completion  [ This may take a while if your files are very large or far away ]
  loop: "{{ __download_parcels_results.results }}"
  loop_control:
    loop_var: __download_async_item
  register: __async_download_results
  until: __async_download_results.finished is defined and __async_download_results.finished
  delay: 15
  retries: 300
  async_status:
    jid: "{{ __download_async_item.ansible_job_id }}"
  failed_when:
    - __download_async_item.failed == True
    - __download_async_item.finished != 1